<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.web.dao.MessageToUserMapper">
  <resultMap id="BaseResultMap" type="com.spring.web.model.MessageToUser">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="message_id" jdbcType="VARCHAR" property="messageId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="revice_flag" jdbcType="TINYINT" property="reviceFlag" />
    <result column="read_flag" jdbcType="TINYINT" property="readFlag" />
    <result column="read_time" jdbcType="TIMESTAMP" property="readTime" />
    <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
  </resultMap>
  <sql id="Base_Column_List">
    id, message_id, user_id, revice_flag, read_flag, read_time,del_flag
  </sql>
  <sql id="New_Base_Column_List">
    mtu.id, mtu.message_id, mtu.user_id, mtu.revice_flag, mtu.read_flag, mtu.read_time,mtu.del_flag
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from message_to_user
    where id = #{id,jdbcType=VARCHAR}
  </select>
  
  <select id="getMessageStatus" parameterType="java.util.Map" resultMap="BaseResultMap">
  	SELECT 
  		<include refid="Base_Column_List" />
	FROM
	  `message_to_user` mtu
	  
	  WHERE mtu.`message_id` = #{map.messageId}
	  AND mtu.`user_id` = #{map.reviceUserId}
	  AND mtu.`del_flag` = 0
  </select>
  
  <select id="getUnReviceMessages" parameterType="java.lang.Integer" resultMap="BaseResultMap">
   SELECT 
	  <include refid="New_Base_Column_List" /> 
	FROM
	  `message_to_user` mtu 
	  LEFT JOIN `messages` m 
	    ON mtu.`message_id` = m.`id` 
	WHERE mtu.`user_id` = #{userId}
	  AND mtu.`revice_flag` = 0 
	  AND mtu.`del_flag` = 0 
	  AND m.`del_flag` = 0
	  ORDER BY m.create_time
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from message_to_user
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.spring.web.model.MessageToUser">
    insert into message_to_user (id, message_id, user_id, 
      revice_flag, read_flag, read_time,del_flag
      )
    values (#{id,jdbcType=VARCHAR}, #{messageId,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{reviceFlag,jdbcType=TINYINT}, #{readFlag,jdbcType=TINYINT}, #{readTime,jdbcType=TIMESTAMP},#{delFlag,jdbcType=TINYINT}
      )
  </insert>
  
  <update id="updateInfoByMessageAndUserId" parameterType="com.spring.web.model.MessageToUser">
  	update message_to_user
    <set>
      <if test="reviceFlag != null">
        revice_flag = #{reviceFlag,jdbcType=TINYINT},
      </if>
      <if test="readFlag != null">
        read_flag = #{readFlag,jdbcType=TINYINT},
      </if>
      <if test="readTime != null">
        read_time = #{readTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=TINYINT},
      </if>
    </set>
    where message_id = #{messageId,jdbcType=VARCHAR}
    and user_id = #{userId,jdbcType=INTEGER}
  </update>
  <insert id="insertSelective" parameterType="com.spring.web.model.MessageToUser">
    insert into message_to_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="messageId != null">
        message_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="reviceFlag != null">
        revice_flag,
      </if>
      <if test="readFlag != null">
        read_flag,
      </if>
      <if test="readTime != null">
        read_time,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="messageId != null">
        #{messageId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="reviceFlag != null">
        #{reviceFlag,jdbcType=TINYINT},
      </if>
      <if test="readFlag != null">
        #{readFlag,jdbcType=TINYINT},
      </if>
      <if test="readTime != null">
        #{readTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.spring.web.model.MessageToUser">
    update message_to_user
    <set>
      <if test="messageId != null">
        message_id = #{messageId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="reviceFlag != null">
        revice_flag = #{reviceFlag,jdbcType=TINYINT},
      </if>
      <if test="readFlag != null">
        read_flag = #{readFlag,jdbcType=TINYINT},
      </if>
      <if test="readTime != null">
        read_time = #{readTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <update id="updateByMessageIdSelective" parameterType="com.spring.web.model.MessageToUser">
    update message_to_user
    <set>
      <if test="reviceFlag != null">
        revice_flag = #{reviceFlag,jdbcType=TINYINT},
      </if>
      <if test="readFlag != null">
        read_flag = #{readFlag,jdbcType=TINYINT},
      </if>
      <if test="readTime != null">
        read_time = #{readTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=TINYINT},
      </if>
    </set>
    where message_id = #{messageId,jdbcType=VARCHAR} 
	and    user_id = #{userId,jdbcType=INTEGER}
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.spring.web.model.MessageToUser">
    update message_to_user
    set message_id = #{messageId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      revice_flag = #{reviceFlag,jdbcType=TINYINT},
      read_flag = #{readFlag,jdbcType=TINYINT},
      read_time = #{readTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=TINYINT}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <insert id="insertMessagesListBatch" useGeneratedKeys="true" parameterType="List">
    <selectKey resultType="long" keyProperty="id" order="AFTER">
      SELECT
      LAST_INSERT_ID()
    </selectKey>
    insert into message_to_user (id, message_id, user_id
      )
    values
    <foreach collection="list" item="item" index="index" separator="," >
      (#{item.id},#{item.messageId},#{item.userId})
    </foreach>
  </insert>
  
  <select id="getUnreadMessageCount" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  	SELECT 
	  COUNT(*) 
	FROM
	  `message_to_user` mtu 
	  LEFT JOIN `messages` m 
	    ON mtu.`message_id` = m.`id` 
	WHERE mtu.`user_id` = #{userId}
	  AND mtu.`read_flag` = 0 
	  AND mtu.`del_flag` = 0 
	  AND m.`del_flag` = 0
  </select>
</mapper>