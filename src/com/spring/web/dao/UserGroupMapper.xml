<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.web.dao.UserGroupMapper">
  <resultMap id="BaseResultMap" type="com.spring.web.model.UserGroup">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="group_name" jdbcType="VARCHAR" property="groupName" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />  
    
    <result column="group_type" jdbcType="INTEGER" property="groupType" />
    <result column="group_village" jdbcType="INTEGER" property="groupVillage" />
    <result column="group_village_type" jdbcType="INTEGER" property="groupVillageType" />
  </resultMap>
  <sql id="Base_Column_List">
    id, group_name, user_id, create_time,group_type,group_village,group_village_type
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_group
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user_group
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.spring.web.model.UserGroup">
    insert into user_group (id, group_name, user_id, 
      create_time,group_type,group_village,group_village_type)
    values (#{id,jdbcType=VARCHAR}, #{groupName,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP},#{groupType,jdbcType=INTEGER},#{groupVillage,jdbcType=INTEGER},#{groupVillageType,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.spring.web.model.UserGroup">
    insert into user_group
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="groupName != null">
        group_name,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="groupType != null">
        group_type,
      </if>
      <if test="groupVillage != null">
        group_village,
      </if>
      <if test="groupVillageType != null">
        group_village_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="groupName != null">
        #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="groupType != null">
        #{groupType,jdbcType=INTEGER},
      </if>
      <if test="groupVillage != null">
        #{groupVillage,jdbcType=INTEGER},
      </if>
      <if test="groupVillageType != null">
        #{groupVillageType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.spring.web.model.UserGroup">
    update user_group
    <set>
      <if test="groupName != null">
        group_name = #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="groupType != null">
        group_type = #{groupType,jdbcType=INTEGER},
      </if>
      <if test="groupVillage != null">
        group_village = #{groupVillage,jdbcType=INTEGER},
      </if>
      <if test="groupVillageType != null">
        group_village_type = #{groupVillageType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.spring.web.model.UserGroup">
    update user_group
    set group_name = #{groupName,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      group_type = #{groupType,jdbcType=INTEGER},
      group_village = #{groupVillage,jdbcType=INTEGER},
      group_village_type = #{groupVillageType,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <select id="getUsersByOrgId" parameterType="java.util.Map" resultType="java.util.Map">
  SELECT 
	  ut.`id` AS userId,
	  ut.`user_name` AS userName,
	  vt.`user_id` AS villageId,
	  vt.`name` AS villageName,
	  tt.`user_id` AS townId,
	  tt.`name`AS townName, 
	  dt.`user_id` AS districtId,
	  dt.name AS districtName,
	  dt.`city_id` AS cityId
	FROM
	  `user_tbl` ut 
	  LEFT JOIN `village_tbl` vt 
	    ON ut.id = vt.`user_id` 
	  LEFT JOIN `town_tbl` tt 
	    ON ut.id = tt.`user_id` 
	  LEFT JOIN `district_tbl` dt 
	    ON ut.id = dt.`user_id`
	  where  ut.is_del = 0 and ut.is_freeze = 0 
	  <if test="map.cityId != null">
	    and dt.`city_id` = #{map.cityId}
	  </if>
	  <if test="map.districtId != null">
	    and tt.`district_id` = #{map.districtId}
	  </if> 
	  <if test="map.townId != null">
	    and vt.`town_id` = #{map.townId}
	  </if> 
  </select>
  
  <select id="getCompanyByCondition" parameterType="java.util.Map" resultType="java.util.Map">
   SELECT 
	  ct.`user_id` AS companyId,
	  ct.name AS companyName 
	FROM
	  `company_tbl` ct 
	  INNER JOIN `user_tbl` ut 
	    ON ct.`user_id` = ut.`id` 
	WHERE  ut.is_del = 0 and ut.is_freeze = 0
	<if test="map.companyName != null">
	  AND ct.`name` LIKE CONCAT('%', #{map.companyName},'%')
	</if>
	<if test="map.villageId != null">
	  AND ct.`village_id` = #{map.villageId}  
	</if>
  </select>
  
  <select id="getVillageNameByUserId" parameterType="java.lang.Integer" resultType="java.util.Map">
  SELECT 
	  ut.`id` AS userId,
	  ut.`user_name` AS userName,
	  vt.`name` AS villageName,
	  tt.name AS townName,
	  dt.name AS districtName
	FROM
	  `user_tbl` ut 
	  LEFT JOIN `village_tbl` vt 
	    ON ut.id = vt.`user_id` 
	  LEFT JOIN `town_tbl` tt 
	    ON ut.id = tt.`user_id` 
	  LEFT JOIN `district_tbl` dt 
	    ON ut.id = dt.`user_id` 
	WHERE ut.id = #{userId}
	and ut.is_del = 0 and ut.is_freeze = 0
  </select>
  
 <select id="getVillageNameByUserId1" parameterType="java.lang.Integer" resultType="java.util.Map">
  SELECT 
	  ut.`id` AS userId,
	  ut.`user_name` AS userName,
	  vt.`name` AS villageName,
	  tt.name AS townName,
	  dt.name AS districtName,
	  tr.name AS tradeName,
	  co.name AS companyName
	FROM
	  `user_tbl` ut 
	  LEFT JOIN `village_tbl` vt 
	    ON ut.id = vt.`user_id` 
	  LEFT JOIN `town_tbl` tt 
	    ON ut.id = tt.`user_id` 
	  LEFT JOIN `district_tbl` dt 
	    ON ut.id = dt.`user_id` 
	  LEFT JOIN `trade_tbl` tr 
	    ON ut.id = tr.`user_id` 
	  LEFT JOIN `company_tbl` co 
	    ON ut.id = co.`user_id`
	WHERE ut.id = #{userId}
	and ut.is_del = 0 and ut.is_freeze = 0
  </select>
  
  <select id="searchCompanyByCondition" parameterType="java.util.Map" resultType="java.util.Map">
  	SELECT 
	  cv.`user_id` AS userId,
	  cv.name AS companyName,
	  cv.`is_key` AS isKey  
	FROM
	  `company_view` cv 
	<where>
		<if test="map.villageId != null">
	  		AND cv.`village_id` = #{map.villageId}
		</if>
		<if test="map.townId != null">
	  		AND cv.`town_id` = #{map.townId}
		</if>
		 <if test="map.districtId != null">
	  		AND cv.`district_id` = #{map.districtId}
		 </if>
	    <if test="map.companyName!= null">
	  		AND cv.`name` LIKE CONCAT('%', #{map.companyName},'%')
		 </if> 
	  
	</where>
  </select>
  <select id="searchCompanyByConditionTrade" parameterType="java.util.Map" resultType="java.util.Map">
  	SELECT 
  	  T2.tid AS tradeId,
	  T3.user_id AS userId,
	  T3.name AS companyName,
	  T3.is_key AS isKey  
	FROM
        trade_tbl T1
        LEFT JOIN trade_company_tbl T2 ON T1.user_id = T2.tid
        LEFT JOIN company_view T3 ON T2.uid = T3.user_id  
	<where>
		T1.user_id = #{map.tradeId}
		<if test="map.companyName!= null">
	  		AND T3.name LIKE CONCAT('%', #{map.companyName},'%')
		</if> 
	</where>
  </select>
    <select id="searchCompanyByConditionCompany" parameterType="java.util.Map" resultType="java.util.Map">
  	SELECT 
	  T3.village_id AS userId,
	  T3.village_name AS companyName,
	  T3.is_key AS isKey  
	FROM
        company_view T3  
	<where>
		T3.user_id = #{map.companyId}
	</where>
  </select>
  <select id="searchCompanyByConditionCompanyTrade" parameterType="java.util.Map" resultType="java.util.Map">
	SELECT 
	  t2.user_id AS userId,
	  t2.name AS companyName
	FROM
       trade_company_tbl t1
		left join trade_tbl t2 ON t1.tid = t2.user_id
		left join user_tbl t3 ON t2.user_id = t3.id
	where
		t1.uid = #{map.companyId} and t3.is_freeze = '0'
  </select>
  
  <select id="getCompanyNameByUserId" parameterType="java.lang.Integer" resultType="java.lang.String">
  	SELECT 
	  cv.name AS companyName
	FROM
	  `company_view` cv 
	WHERE cv.`user_id` = #{userId}
  </select>
  
  <select id="getUserGroupList" parameterType="java.util.Map" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_group
    where user_id = #{map.userId}
    <if test="map.groupName != null">
    	AND group_name  LIKE CONCAT('%', #{map.groupName},'%')
    </if>
     order by create_time desc
  </select>
  
  <select id="getCompanyInfoById" parameterType="java.lang.Integer" resultType="java.util.Map">
  	SELECT 
	  cv.name AS companyName,
	  cv.village_id as villageId,
	  cv.town_id as townId,
	  cv.district_id as districtId
	FROM
	  `company_view` cv 
	WHERE cv.`user_id` = #{userId}
	limit 0,1
  </select>
</mapper>